# -*- coding: utf-8 -*-
"""ink.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i2JpaqHDcRv47XjWDNkuKzravl0a9BOt
"""

from backtester.datamodel import OrderDepth, UserId, TradingState, Order
from typing import List
import string
import pandas as pd
import numpy as np

class Trader:
    ink_cache = []

    def run(self, state: TradingState):
        def compute_vwap(order_depth):
            acceptable_price = 0
            total_amount = 0
            if len(order_depth.sell_orders) != 0:
                for ask, amount in list(order_depth.sell_orders.items()):
                    acceptable_price += abs(ask * amount)
                    total_amount += abs(amount)
            if len(order_depth.buy_orders) != 0:
                for bid, amount in list(order_depth.buy_orders.items()):
                    acceptable_price += abs(bid * amount)
                    total_amount += abs(amount)
            return acceptable_price / total_amount

        print("traderData: " + state.traderData)
        print("Observations: " + str(state.observations))
        result = {}

        orders_basket: list[Order] = []
        for product in state.order_depths:
            print(product)
            if product == 'SQUID_INK':
                orders: List[Order] = []
                position: int = state.position.get(product, 0)
                print('POSITION: ' + str(position))
                max_buy = 50 - position
                max_sell = -50 - position
                max_position = 50
                #cache len
                cache_len = 50
                #cache len
                order_depth: OrderDepth = state.order_depths[product]
                vwap = compute_vwap(order_depth)
                self.ink_cache.append(vwap)
                if len(self.ink_cache) > cache_len:
                    self.ink_cache.pop(0)
                    print("CACHE: " + str(self.ink_cache))
                    rolling_average = np.mean(self.ink_cache)
                    print("ROLLING_AVERAGE: " + str(rolling_average))
                    rolling_std = np.std(self.ink_cache)
                    print("ROLLING_STD: " + str(rolling_std))
                    if len(order_depth.sell_orders) != 0:
                        for ask, amount in list(order_depth.sell_orders.items()):
                            if int(ask) < rolling_average - 1.5* rolling_std:
                                buy_volume = max(min(-amount, max_buy), 0)
                                print("BUY", str(-buy_volume) + "x", ask)
                                orders.append(Order(product, ask, buy_volume))
                                max_buy = max_buy - buy_volume
                                position = position + buy_volume

                    if len(order_depth.buy_orders) != 0:
                        for bid, amount in list(order_depth.buy_orders.items()):
                            if int(bid) > rolling_average +  1.5*rolling_std:
                                sell_volume = min(max(-amount, max_sell), 0)
                                print("SELL", str(sell_volume) + "x", bid)
                                orders.append(Order(product, bid, sell_volume))
                                max_sell = max_sell - sell_volume
                                position = position + sell_volume
                result[product] = orders



        traderData = "SAMPLE"
        conversions = 1

        return result, conversions, traderData